ggplot(training, aes(x = FraudResult)) +
geom_histogram()
library(readr)
library(knitr)
library(tidyverse)
library(ggplot2)
memory.limit(size = 3000000000000)
training.data.raw <- read.csv(file = "../training.csv", header = TRUE, na.strings=c(""))
# Only one currency and one country code
# Remove country code and currency code
training.data.raw <- training.data.raw %>% select(-CurrencyCode,-CountryCode)
ggplot(training, aes(x = FraudResult)) +
geom_histogram()
training <- training.data.raw[1:66963,]
validation <- training.data.raw[66964:95662,]
library(rpart)
model <- rpart(formula = FraudResult ~ ., training)
summary(model)
pred <- predict(model, training)
conf <- table(training$FraudResult, pred)
View(conf)
accs <- sum(diag(conf))/sum(conf)
accs
pred
View(pred ==1)
training.data.raw <- read.csv(file = "../training.csv", header = TRUE, na.strings=c(""))
# Only one currency and one country code
# Remove country code and currency code
training.data.raw <- training.data.raw %>% select(-CurrencyCode,-CountryCode)
training <- training.data.raw[1:66963,]
validation <- training.data.raw[66964:95662,]
summary(training)
ggplot(training, aes(x = FraudResult)) +
geom_histogram()
ggplot2::ggplot(training, aes(x = FraudResult)) +
geom_histogram()
library(readr)
library(knitr)
library(tidyverse)
library(ggplot2)
library(rpart)
memory.limit(size = 3000000000000)
ggplot2::ggplot(training, aes(x = FraudResult)) +
geom_histogram()
ggplot2::ggplot(training, aes(x = FraudResult)) +
geom_histogram() +
stat_bin(aes(label=..count..))
ggplot2::ggplot(training, aes(x = FraudResult)) +
geom_histogram() +
stat_bin(aes(label=..count..)) +
scale_x_discrete(labels = comma)
ggplot2::ggplot(training, aes(x = FraudResult)) +
geom_histogram() stat_bin(binwidth=1) + ylim(c(0, 12)) +
stat_bin(binwidth=1, geom="text", aes(label=..count..), vjust=-1.5)
ggplot2::ggplot(training, aes(x = FraudResult)) +
geom_histogram() stat_bin(binwidth=1) + ylim(c(0, 1)) +
stat_bin(binwidth=1, geom="text", aes(label=..count..), vjust=-1.5)
ggplot2::ggplot(training, aes(x = FraudResult)) +
geom_histogram() +
stat_bin(binwidth=1) + ylim(c(0, 1)) +
stat_bin(binwidth=1, geom="text", aes(label=..count..), vjust=-1.5)
ggplot2::ggplot(training, aes(x = FraudResult)) +
geom_histogram() +
stat_bin(binwidth=1) + ylim(c(0, 500000)) +
stat_bin(binwidth=1, geom="text", aes(label=..count..), vjust=-1.5)
ggplot2::ggplot(training, aes(x = FraudResult)) +
geom_histogram() +
stat_bin(binwidth=1) + ylim(c(0, 50000)) +
stat_bin(binwidth=1, geom="text", aes(label=..count..), vjust=-1.5)
ggplot2::ggplot(training, aes(x = FraudResult)) +
geom_histogram() +
stat_bin(binwidth=1) + ylim(c(0, 10000)) +
stat_bin(binwidth=1, geom="text", aes(label=..count..), vjust=-1.5)
ggplot2::ggplot(training, aes(x = FraudResult)) +
geom_histogram() +
stat_bin(binwidth=1) + ylim(c(0, 100000)) +
stat_bin(binwidth=1, geom="text", aes(label=..count..), vjust=-1.5)
ggplot2::ggplot(training, aes(x = FraudResult)) +
geom_histogram() +
stat_bin(binwidth=1) + ylim(c(0, 100000)) +
stat_bin(binwidth=1, geom="text", aes(label=..count../..sum>>), vjust=-1.5)
ggplot2::ggplot(training, aes(x = FraudResult)) +
geom_histogram() +
stat_bin(binwidth=1) + ylim(c(0, 100000)) +
stat_bin(binwidth=1, geom="text", aes(label=..count../..sum..), vjust=-1.5)
ggplot2::ggplot(training, aes(x = FraudResult)) +
geom_histogram() +
stat_bin(binwidth=1) + ylim(c(0, 100000)) +
stat_bin(binwidth=1, geom="text", aes(label=..percent..), vjust=-1.5)
ggplot2::ggplot(training, aes(x = FraudResult)) +
geom_histogram() +
stat_bin(binwidth=1) + ylim(c(0, 100000)) +
stat_bin(binwidth=1, geom="text", aes(label=..count..), vjust=-1.5)
ggplot2::ggplot(training, aes(x = FraudResult)) +
geom_histogram() +
stat_bin(binwidth=1) + ylim(c(0, 75000)) +
stat_bin(binwidth=1, geom="text", aes(label=..count..), vjust=-1.5)
ggplot2::ggplot(training, aes(x = FraudResult)) +
geom_histogram() +
stat_bin(binwidth=1) + ylim(c(0, 65000)) +
stat_bin(binwidth=1, geom="text", aes(label=..count..), vjust=-1.5)
ggplot2::ggplot(training, aes(x = FraudResult)) +
geom_histogram() +
stat_bin(binwidth=1) + ylim(c(0, 70000)) +
stat_bin(binwidth=1, geom="text", aes(label=..count..), vjust=-1.5)
h = hist(training$FraudResult)
h$density = h$counts/sum(h$counts)*100
plot(h, freq = FALSE)
h = hist(training$FraudResult)
h$density = h$counts/sum(h$counts)*100
plot(h, freq = FALSE)
h$density = h$counts/sum(h$counts)*100
plot(h, freq = FALSE)
h$density = h$counts/sum(h$counts)*100
plot(h, freq = FALSE)
h = hist(training$FraudResult)
h$density = h$counts/sum(h$counts)*100
plot(h, freq = FALSE)
plot(h, freq = FALSE, ylab = 'Percentage')
ggplot2::ggplot(training, aes(x = FraudResult)) +
geom_histogram() +
scale_y_continuous(labels = scales::percent)
ggplot2::ggplot(training, aes(x = FraudResult)) +
geom_histogram() +
scale_y_continuous(labels = scales::percent) +
#use positions to plot labels
geom_text(aes(label = paste0(100*value,"%"),y=labelpos),size = 3)
ggplot2::ggplot(training, aes(x = FraudResult)) +
geom_histogram() +
scale_y_continuous(labels = scales::percent) +
#use positions to plot labels
geom_text(aes(label = paste0(100*value,"%"),y=label),size = 3)
ggplot2::ggplot(training, aes(x = FraudResult)) +
geom_histogram() +
scale_y_continuous(labels = scales::percent) +
#use positions to plot labels
geom_text(aes(label = paste0(100*value,"%"),y=y),size = 3)
ggplot2::ggplot(training, aes(x = FraudResult)) +
geom_histogram() +
geom_text(
aes(label='stat(prop)*100'),
stat='count',
nudge_y=0.125,
va='bottom',
format_string='{:.1f}% '
)
library(scales)
ggplot2::ggplot(training, aes(x = FraudResult)) +
geom_histogram(aes(y = (..count..)/sum(..count..)))
ggplot2::ggplot(training, aes(x = FraudResult)) +
geom_histogram() +
stat_bin(aes(label = round((..count..)/sum(..count..),digits = 2)))
ggplot2::ggplot(training, aes(x = FraudResult)) +
geom_histogram() +
stat_bin(aes(label = round((..count..)/sum(..count..),digits = 2)), geom = "text")
ggplot2::ggplot(training, aes(x = FraudResult)) +
geom_histogram() +
stat_bin(aes(label = round((..count..)/sum(..count..),digits = 4)), geom = "text")
ggplot2::ggplot(training, aes(x = FraudResult)) +
geom_histogram() +
stat_bin(aes(label = percent((..count..)/sum(..count..))), geom = "text")
ggplot2::ggplot(training, aes(x = FraudResult)) +
geom_histogram() +
scale_x_discrete() +
stat_bin(aes(label = percent((..count..)/sum(..count..))), geom = "text")
ggplot2::ggplot(training, aes(x = FraudResult)) +
geom_histogram(stat = 'count') +
stat_bin(aes(label = round((..count..)/sum(..count..), digits = 4)), geom = "text")
ggplot2::ggplot(training, aes(x = FraudResult)) +
geom_histogram(stat = 'count') +
stat_bin(bins = 2,aes(label = round((..count..)/sum(..count..), digits = 4)), geom = "text")
ggplot2::ggplot(training, aes(x = FraudResult)) +
geom_histogram(stat = 'count') +
stat_bin(bins = 2, aes(label = round((..count..)/sum(..count..), digits = 4)), geom = "text", size = 4)
ggplot2::ggplot(training, aes(x = FraudResult)) +
geom_histogram(stat = 'count') +
stat_bin(bins = 2, aes(label = round((..count..)/sum(..count..), digits = 4)), geom = "text", size = 4, position = 2)
?stat_bin
ggplot2::ggplot(training, aes(x = FraudResult)) +
geom_histogram(stat = 'count') +
stat_bin(bins = 2, aes(label = round((..count..)/sum(..count..), digits = 4)), geom = "text", size = 4, position = )
ggplot2::ggplot(training, aes(x = FraudResult)) +
geom_histogram(stat = 'count') +
stat_bin(bins = 2, aes(label = round((..count..)/sum(..count..), digits = 4)), geom = "text", size = 4, position = top)
ggplot2::ggplot(training, aes(x = FraudResult)) +
geom_histogram(stat = 'count') +
stat_bin(bins = 2, aes(label = round((..count..)/sum(..count..), digits = 4)), geom = "text", size = 4, position = "identity")
ggplot2::ggplot(training, aes(x = FraudResult)) +
geom_histogram(stat = 'count') +
stat_bin(aes(label = round((..count..)/sum(..count..), digits = 4)), geom = "text", size = 4, drop = TRUE)
ggplot2::ggplot(training, aes(x = FraudResult)) +
geom_histogram(stat = 'count') +
stat_bin(bins = 2, aes(label = round((..count..)/sum(..count..), digits = 4)), geom = "text", size = 4)
ggplot2::ggplot(training, aes(x = FraudResult)) +
geom_histogram(stat = 'count') +
stat_bin(bins = 2, aes(label = round((..count..)/sum(..count..), digits = 4)), geom = "text", size = 4) +
ggtitle("Fraud Result Histogram")
summary(training)
summary(training)
ggplot2::ggplot(training, aes(x = FraudResult)) +
geom_histogram(stat = 'count') +
stat_bin(bins = 2, aes(label = round((..count..)/sum(..count..), digits = 4)), geom = "text", size = 4) +
ggtitle("Fraud Result Histogram")
library(readr)
library(knitr)
library(tidyverse)
library(ggplot2)
library(rpart)
library(scales)
memory.limit(size = 3000000000000)
training.data.raw <- read.csv(file = "../training.csv", header = TRUE, na.strings=c(""))
# sapply(training.data.raw,function(x) sum(is.na(x)))
# sapply(training.data.raw, function(x) length(unique(x)))
# Only one currency and one country code
# Remove country code and currency code
training.data.raw <- training.data.raw %>% select(-CurrencyCode,-CountryCode)
training <- training.data.raw[1:66963,]
validation <- training.data.raw[66964:95662,]
install.packages("DT")
library(DT)
library(DT)
training.data.raw <- read.csv(file = "../training.csv", header = TRUE, na.strings=c("")) %>% DT::datatable()
class(training.data.raw)
training.data.raw <- read.csv(file = "../training.csv", header = TRUE, na.strings=c(""))
class(training.data.raw)
datatable(sapply(training.data.raw, function(x) length(unique(x))))
class(sapply(training.data.raw,function(x) sum(is.na(x))))
sapply(training.data.raw,function(x) sum(is.na(x)))
sapply(training.data.raw,function(x) sum(is.na(x))) %>% as.data.frame()
sapply(training.data.raw,function(x) sum(is.na(x))) %>% as.data.frame() %>% datatable()
sapply(training.data.raw,function(x) sum(is.na(x))) %>% as.data.frame() %>% datatable()
sapply(training.data.raw,function(x) sum(is.na(x))) %>% as.data.frame(row.names = c("Variable", "Missing Obs"))
a <- head(training.data.raw)
a1 <- a %>%
mutate(
Day <- as.Date(.,'%d')
)
install.packages("lubridate")
library(lubridate)
training.data.1 <- training.data.raw %>% select(-CurrencyCode,-CountryCode)
library(readr)
library(knitr)
library(tidyverse)
library(ggplot2)
library(rpart)
library(scales)
library(DT)
library(lubridate)
training.data.1 <- training.data.raw %>% select(-CurrencyCode,-CountryCode)
rm(training.data.raw)
training.data.2 <- training.data.1 %>%
mutate(
Day = lubridate::isoweek(training.data.1$TransactionStartTime)
)
head(training.data.2)
min <- year(min(training.data.1$TransactionStartTime))
max <- year(max(training.data.1$TransactionStartTime))
min <- year((training.data.1$TransactionStartTime))
min <- min(year((training.data.1$TransactionStartTime)))
max <- max(year(training.data.1$TransactionStartTime))
View(a)
a[1,"TransactionStartTime"]
lubridate::day(a[1,"TransactionStartTime"])
lubridate::days(a[1,"TransactionStartTime"]) #DayOfMonth
lubridate::days_in_month(a[1,"TransactionStartTime"]) #DayOfMonth
lubridate::ddays(a[1,"TransactionStartTime"]) #DayOfMonth
lubridate::dmy(a[1,"TransactionStartTime"]) #DayOfMonth
lubridate::edays(a[1,"TransactionStartTime"]) #DayOfMonth
lubridate::hm(a[1,"TransactionStartTime"]) #DayOfMonth
lubridate::isoweek(a[1,"TransactionStartTime"]) #DayOfMonth
lubridate::isoyear(a[1,"TransactionStartTime"]) #DayOfMonth
lubridate::leap_year(a[1,"TransactionStartTime"]) #DayOfMonth
lubridate::mday(a[1,"TransactionStartTime"]) #DayOfMonth
lubridate::day(a[1,"TransactionStartTime"]) #DayOfMonth
lubridate::(a[1,"TransactionStartTime"]) #DayOfMonth
lubridate::mdy_h(a[1,"TransactionStartTime"]) #DayOfMonth
lubridate::mdy_hm(a[1,"TransactionStartTime"]) #DayOfMonth
lubridate::minute(a[1,"TransactionStartTime"]) #DayOfMonth
b <- a[1,"TransactionStartTime"]
lubridate::isoweek(b),
YearMonthDate = ymd(b),
Year = year(b),
Month = month(b),
WeekDay = wday(b),
Time = ymd_hms(b),
lubridate::day() #DayOfMonth
lubridate::isoweek(b)
ymd(b)
year(b),
Month = month(b),
WeekDay = wday(b),
Time = ymd_hms(b),
lubridate::day() #DayOfMonth
year(b)
month(b)
wday(b)
ymd_hms(b)
lubridate::day(b) #DayOfMonth
lubridate::minute(a[1,"TransactionStartTime"]) #DayOfMonth
lubridate::mdy_hms(b) #DayOfMonth
lubridate::myd(b) #DayOfMonth
lubridate::ms(b) #DayOfMonth
lubridate::pm(b) #DayOfMonth
lubridate::pretty_dates(b)
lubridate::qday(b)
lubridate::isoweek(b)
b <- a[2,"TransactionStartTime"]
lubridate::isoweek(b)
b
b <- a[3,"TransactionStartTime"]
lubridate::isoweek(b)
b <- a[5,"TransactionStartTime"]
lubridate::isoweek(b)
b
a <- last(training.data.1)
b <- a[5,"TransactionStartTime"]
a <- tail(training.data.1)
b <- a[5,"TransactionStartTime"]
lubridate::isoweek(b)
lubridate::qday(b)
b
lubridate::quarter(b)
lubridate::yday(b)
b <- a[1,"TransactionStartTime"]
lubridate::isoweek(b)
a <- training.data.1[255:400,"TransactionStartTime"]
b <- a[1,"TransactionStartTime"]
a <- training.data.1[255:400,"TransactionStartTime"] %>% as.data.frame()
b <- a[1,"TransactionStartTime"]
b <- a[1,]
lubridate::isoweek(b)
lubridate::yday(b)
lubridate::ydm_h(b)
lubridate::date(b)
ymd_hms(b)
round(2.34, digits = 1)
round(2.34, digits = 0)
trainingPerc <- as.integer(0.7)
View(trainingPerc)
trainingPerc <- as.numeric(0.7)
training <- training.data.2[1:round(trainingPerc*nrow(training.data.2), digits = 0)]
round(trainingPerc*nrow(training.data.2), digits = 0)
class(round(trainingPerc*nrow(training.data.2), digits = 0))
training.data.2[1:round(trainingPerc*nrow(training.data.2), digits = 0)]
training <- training.data.2[1:round(trainingPerc*nrow(training.data.2), digits = 0),]
validation <- training.data.2[round(trainingPerc*nrow(training.data.2)+1:nrow(training.data.2), digits = 0),]
validation <- training.data.2[round(1-trainingPerc*nrow(training.data.2)+1:nrow(training.data.2), digits = 0),]
(1-trainingPerc)
validation <- training.data.2[round((1-trainingPerc)*nrow(training.data.2), digits = 0):nrow(training.data.2),]
training.data.2 <- training.data.1 %>%
mutate(
WeekNumber = lubridate::isoweek(training.data.1$TransactionStartTime),
Year = lubridate::year(training.data.1$TransactionStartTime),
Month = lubridate::month(training.data.1$TransactionStartTime),
WeekDay = lubridate::wday(training.data.1$TransactionStartTime),
Time = lubridate::ymd_hms(training.data.1$TransactionStartTime),
DayOfMonth <- lubridate::day(training.data.1$TransactionStartTime),
AMOrPM <- lubridate::pm(training.data.1$TransactionStartTime),
DayOfQuarter <- lubridate::qday(training.data.1$TransactionStartTime),
Quarter <- lubridate::quarter(training.data.1$TransactionStartTime),
DayOfYear <- lubridate::yday(training.data.1$TransactionStartTime),
Date <- lubridate::date(training.data.1$TransactionStartTime)
)
rm(training.data.1)
trainingPerc <- as.numeric(0.7)
training <- training.data.2[1:round(trainingPerc*nrow(training.data.2), digits = 0),]
validation <- training.data.2[round((1-trainingPerc)*nrow(training.data.2)+1, digits = 0):nrow(training.data.2),]
validation <- training.data.2[round((trainingPerc)*nrow(training.data.2)+1, digits = 0):nrow(training.data.2),]
class(summary(training))
summary(training) %>% unlist() %>% as.data.frame()
summary(training)
